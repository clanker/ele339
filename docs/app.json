[{"name":"app.R","content":"source(\"ui.R\")\nsource(\"server.R\")\nshinyApp(ui, server)\n","type":"text"},{"name":"server.R","content":"#\n# This is the server logic of a Shiny web application. You can run the\n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\n\nlibrary(Ryacas)\nlibrary(tidyverse)\n\nas_function <- function(expr) {\n  as.function(alist(x =, eval(parse(text = expr))))\n}\n\n# redefine D function\nD <- function(eq, order = 1) {\n  yac_str(paste(\"D(x,\", order, \")\", eq))\n}\n\neq_add <- function(str1, str2, str3 = NULL) {\n  out <- paste(\"(\", str1, \"+\", str2)\n  if (!is.null(str3))  out <- paste(out, \"+\", str3)\n  paste(out, \")\")\n}\n\neq_mult <- function(str1, str2, str3 = NULL) {\n  out <- paste(str1, \"*\", str2)\n  if (!is.null(str3))  out <- paste(out, \"*\", str3)\n  out\n}\n\neq_div <- function(str1, str2, str3 = NULL) {\n  out <- paste(str1, \"/\", str2)\n  if (!is.null(str3))  out <- paste(out, \"/\", str3)\n  out\n}\n\neq_parallel <- function(str1, str2) {\n  out <- paste(str1, \"*\", str2, \"/ (\", str1, \"+\", str2, \")\")\n}\n\nconv_to_phase <- function(x) { 0.5 + x/360 }\n\nplot_bode <- function(f, x, f_lim = NULL) {\n\n  A = Mod(x)\n  theta = Arg(x)*180/pi\n  max_A <- ceiling(max(1, max(A)))\n\n  ggplot(data = tibble(f = f, A = A, theta = theta)) +\n    geom_hline(yintercept = seq(0, max_A, by = max_A/4), lwd = 1/5) +\n    #geom_hline(yintercept = setdiff(seq(1/12, 11/12, by = 1/12), c(1/4, 1/2, 3/4)),\n    #           col = 'red2', lty = 3, lwd = 1/8) +\n    geom_line(mapping = aes(x = f, y = A)) +\n    geom_line(mapping = aes(x = f, y = max_A*conv_to_phase(theta)), col = 'red2', lty = 2) +\n    labs(x = \"f (Hz)\", y = \"voltage gain\") +\n    scale_x_log10(breaks = 10^(1:8),\n                  labels = c(\"10\", \"100\", \"1k\", \"10k\", \"100k\", \"1M\", \"10M\", \"100M\"),\n                  minor_breaks = c(10^(1:8)*5, 10^(1:8)*2),\n                  limits = f_lim,\n                  expand = rep(0, 4)) +\n    scale_y_continuous(breaks = seq(0, max_A, by = ceiling(max_A*10)/200),\n                       expand = rep(0.002, 4),\n                       minor_breaks = NULL,\n                       sec.axis = sec_axis(~ 360 * ((. / max_A) - 0.5),\n                                           name = \"phase (deg.)\",\n                                           breaks = seq(-180, 180, by = 30))) +\n    theme_bw(base_size = 16)\n}\n\ncalc_s <- function(type, value) {\n  if (type == \"R\") return (as.character(value))\n  if (type == \"C\") return (sprintf(\"%s / x\", as.character(1/value)))\n  if (type == \"L\") return (sprintf(\"%s * x\", as.character(value)))\n  #if (type == \"none\") return (NA_character_)\n}\n\n# Define server logic required to draw a histogram\nfunction(input, output, session) {\n\n  output$bodePlot <- renderPlot({\n\n    s1_string <- calc_s(input$type_s1, input$value_s1)\n    #s2_string <- calc_s(input$type_s2, input$value_s2)\n    s3_string <- calc_s(input$type_s3, input$value_s3)\n    s4_string <- calc_s(input$type_s4, input$value_s4)\n    fxn_H <- as_function(eq_div(\n      s4_string,\n      #eq_add(s1_string, eq_parallel(s2_string, eq_add(s3_string, s4_string)))\n      eq_add(s1_string, s3_string, s4_string)\n    ))\n\n    f <- 10^seq(1, 6, by = 0.01)\n    x <- sapply(f*2i*pi, fxn_H)\n\n    plot_bode(f, x)\n\n })\n\n}\n\n# s1_string <- calc_s(\"L\", \"0.1\")\n# s4_string <- calc_s(\"R\", \"100\")\n# fxn_H <- as_function(eq_div(s4_string, eq_add(s1_string, s4_string)))\n#\n# f <- 10^seq(1, 6, by = 0.01)\n# x <- sapply(f*2i*pi, fxn_H)\n#\n# plot_bode(f, x)\n","type":"text"},{"name":"ui.R","content":"#\n# This is the user-interface definition of a Shiny web application. You can\n# run the application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\n# ===============\n# ===  NOTES  ===\n# ===============\n#\n# See `two-elements.Rmd` in ele339/filters for Bode plot code.\n#\n# Future work:\n# Add 95% intervals for Monte Carlo analyses\n#\n\nlibrary(shiny)\nlibrary(tidyverse)\n\nelement_choices <- c(\"R\", \"C\", \"L\") #, \"none\")\n\n# Define UI for application that draws a histogram\nfluidPage(\n\n    # Application title\n    titlePanel(\"R-C Filter Bode Plots\"),\n\n    # Sidebar with a slider input for number of bins\n    sidebarLayout(\n        sidebarPanel(\n          \"Define the parameters of the RLC circuit:\\n\",\n          \"\\nElement 1\",\n          radioButtons(\"type_s1\", \"Type for element #1\", element_choices,\n                       inline = TRUE, selected = \"R\"),\n          numericInput(\"value_s1\", \"Value for element #1\", value = 100),\n          # \"\\nElement 2\",\n          # radioButtons(\"type_s2\", \"Type for element #2\", element_choices,\n          #              inline = TRUE, selected = \"R\"),\n          # numericInput(\"value_s2\", \"Value for element #2\", value = 1000000),\n          \"\\nElement 3\",\n          radioButtons(\"type_s3\", \"Type for element #3\", element_choices,\n                       inline = TRUE, selected = \"C\"),\n          numericInput(\"value_s3\", \"Value for element #3\", value = 1e-8),\n          \"\\nElement 4\",\n          radioButtons(\"type_s4\", \"Type for element #4\", element_choices,\n                       inline = TRUE, selected = \"L\"),\n          numericInput(\"value_s4\", \"Value for element #4\", value = 0.001),\n          width = 3\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n            plotOutput(\"bodePlot\"),\n        )\n    )\n)\n","type":"text"},{"name":"readme.txt","content":"> shinylive::export(appdir = \"projects/rc-and-rl-filters/\", destdir = \"projects/rc-and-rl-filters/docs/\")\nCreating projects/rc-and-rl-filters/docs//\nCopying base Shinylive files from /Users/clanker/Library/Caches/shinylive/shinylive-0.2.1/ to projects/rc-and-rl-filters/docs//\nWriting projects/rc-and-rl-filters/docs/app.json: 1.66K bytes\n\nRun the following in an R session to serve the app:\n  library(plumber)\n  pr() %>% pr_static(\"/\", \"projects/rc-and-rl-filters/docs/\") %>% pr_run()\n\n> library(plumber)\n> pr() %>% pr_static(\"/\", \"projects/rc-and-rl-filters/docs/\") %>% pr_run()\n","type":"text"}]
